Define mccont(f,a,b,grado)=
Prgm
:Local i,j,qi,qj,ip,matriz,vector,coef,polinomio,ecuacion
:
:newMat(grado+1,grado+1)→matriz
:newMat(grado+1,1)→vector
:
:Disp "Productos internos:"
:For i,0,grado
:  For j,0,grado
:∫(x^(i)*x^(j),x,a,b)→ip
:    matriz[i+1,j+1]:=ip
:    Disp "(q",string(j),", q",string(i),") = ",approx(ip)
:  EndFor
:EndFor
:
:Disp ""
:Disp "Productos (f, qi):"
:For i,0,grado
:∫(f*x^(i),x,a,b)→ip
:  vector[i+1,1]:=ip
:  Disp "(f, q",string(i),") = ",approx(ip)
:EndFor
:
:Disp ""
:Disp "Ecuaciones normales:"
:For i,1,grado+1
:""→ecuacion
:   For j,1,grado+1
:     If j>1 Then
:       ecuacion&" + "→ecuacion
:     EndIf
:     ecuacion&"c"&string(j-1)&"*("&string(approx(matriz[i,j]))&")"→ecuacion
:   EndFor
:   ecuacion&" = "&string(approx(vector[i,1]))→ecuacion
:   Disp ecuacion
:EndFor
:
:rref(augment(matriz,vector))→resultado
:newMat(grado+1,1)→coef
:For i,1,grado+1
:  resultado[i,grado+2]→coef[i,1]
:EndFor
:
:Disp ""
:Disp "Coeficientes:"
:For i,1,grado+1
:  Disp "c",string(i-1)," = ",approx(coef[i,1])
:EndFor
:
:0→polinomio
:For i,1,grado+1
:  coef[i,1]*x^(i-1)+polinomio→polinomio
:EndFor
:
:Disp ""
:Disp "Polinomio de ajuste:"
:Disp approx(expand(polinomio))
:EndPrgm